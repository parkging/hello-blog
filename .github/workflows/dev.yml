name: Build and Deploy Dev Branch

on:
  push:
    branches:
      - dev

env:
  OP_ENV: dev
  AWS_REGION: ap-south-1  # 뭄바이
  ECR_REPOSITORY: parkging-blog-dev-ecr
  ECS_CLUSTER: parkging-blog-dev-cluster
  ECS_SERVICE: parkging-blog-dev-service
  CONTAINER_NAME: parkging-blog-dev-container
  CODEDEPLOY_APPSPEC: ./aws/dev/dev-appspec.yml
  CODEDEPLOY_APPLICATION: parkging-blog-dev-codedeploy-application
  CODEDEPLOY_DEPLOYMENT_GROUP: parkging-blog-dev-deployment-group
  ECS_TASK_DEFINITION: ./aws/dev/dev-task-definition.json
#  ECS_TASK_DEFINITION: ${{ github.ref == 'refs/heads/master' && 'prod-task-definition.json' || 'dev-task-definition.json' }}

jobs:
  deploy:

    name: Deploy Dev ECS
    runs-on: ubuntu-latest

    steps:

      # Source Code Checkout
      - name: Checkout
        uses: actions/checkout@v3

      # Setting AWS Access Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Java Setting
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'corretto'

      # Github Repository Secrets를 통해 환경 변수 파일을 생성.
      - name: Generate Environment Variables File for Production
        env:
          APPLICATION_DEV_PROPERTIES: ${{ secrets.APPLICATION_DEV_PROPERTIES }}
          DATABASE_DEV_PROPERTIES: ${{ secrets.DATABASE_DEV_PROPERTIES }}
          APPLICATION_SECURITY_DEV_PROPERTIES: ${{ secrets.APPLICATION_SECURITY_DEV_PROPERTIES }}
        run: |
          echo -e "$APPLICATION_DEV_PROPERTIES" >> ./src/main/resources/application-dev.properties
          echo -e "$DATABASE_DEV_PROPERTIES" >> ./src/main/resources/database-dev.properties
          echo -e "$APPLICATION_SECURITY_DEV_PROPERTIES" >> ./src/main/resources/application-security-dev.properties

      # Gradle wrapper 파일 실행 권한 추가
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Gradle Build
      - name: Build with Gradle
        run: |
          SPRING_PROFILES_ACTIVE=dev ./gradlew clean build --info --stacktrace

      # ECR Login
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # ECR Build and Push Docker Image
      - name: Build and Push
        id: build-image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./aws/${{ env.OP_ENV }}/Dockerfile
          platforms: linux/arm64
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

      # Setting Image Id to env
      - name: Image digest
        id: image-digest
        run: |
          echo "image=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_OUTPUT

      # Fill Image Id and env on task definition
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        env:
          BLOG_OP_ENV: ${{ env.OP_ENV }}
          ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY_VALUE }}
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.image-digest.outputs.image }}
          environment-variables: |
            BLOG_OP_ENV=$BLOG_OP_ENV
            ENCRYPTION_KEY=$ENCRYPTION_KEY

      # Task Definition Deploy
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          codedeploy-appspec: ${{ env.CODEDEPLOY_APPSPEC }}
          codedeploy-application: ${{ env.CODEDEPLOY_APPLICATION }}
          codedeploy-deployment-group: ${{ env.CODEDEPLOY_DEPLOYMENT_GROUP }}